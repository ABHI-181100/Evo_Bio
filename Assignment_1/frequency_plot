%%R

# NOTE While running code :::: Must add this code (%load_ext rpy2.ipython) in prior code box on colab otherwise attached code will not run.
# it allows us to write R code in python environment on cloud based compiler and i am working on colab so it is designed accordingly.

# Part 2: Plot how genotype frequencies vary with allele frequencies p, q, r
# where p + q + r = 1. We'll plot genotype frequencies against p (0 to 1),
# with q = t * (1 - p), r = (1 - t) * (1 - p) for different values of t in [0, 1].
# This ensures p + q + r = 1. We'll use three values of t to show variation.

# Defining sequence for p
p_seq <- seq(0, 1, length.out = 100)

# Defining t values (controls how 1 - p is split between q and r)
t_values <- c(0, 0.5, 1)  # e.g., t = 0 (q = 0, r = 1-p), t = 0.5 (q = r), t = 1 (q = 1-p, r = 0)


# Ploting for each genotype
for (genotype in c("AA", "BB", "CC", "AB", "AC", "BC")) {
    png(paste0(genotype, "_frequency.png"), width = 600, height = 600)
  plot(NA, xlim = c(0, 1), ylim = c(0, 1), xlab = "Allele Frequency p",
       ylab = "Genotype Frequency", main = paste(genotype, "Frequency"),
       cex.lab = 1.2, cex.main = 1.3)
  grid()

  # Colors for different t values
  colors <- c("blue", "red", "green")
  labels <- c("t=0 (q=0)", "t=0.5", "t=1 (r=0)")

  # Calculate and plot frequencies for each t
  for (i in 1:length(t_values)) {
    t <- t_values[i]
    q_seq <- t * (1 - p_seq)
    r_seq <- (1 - t) * (1 - p_seq)

    # Calculate genotype frequency based on genotype type
    if (genotype == "AA") {
      freq <- p_seq^2
    } else if (genotype == "BB") {
      freq <- q_seq^2
    } else if (genotype == "CC") {
      freq <- r_seq^2
    } else if (genotype == "AB") {
      freq <- 2 * p_seq * q_seq
    } else if (genotype == "AC") {
      freq <- 2 * p_seq * r_seq
    } else if (genotype == "BC") {
      freq <- 2 * q_seq * r_seq
    }

    lines(p_seq, freq, col = colors[i], lwd = 3.5)
  }
  legend("topright", legend = labels, col = colors, lwd = 2, cex = 0.8)
  dev.off()
}
